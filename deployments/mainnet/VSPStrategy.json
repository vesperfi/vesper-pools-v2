{
  "address": "0xA5379d69D32555d2a75E0010e09091D990F6A975",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vvsp",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgradable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressListExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRebalanceBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "liquidationLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPoolIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopEverything",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_limit",
          "type": "uint256[]"
        }
      ],
      "name": "updateLiquidationQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vvsp",
      "outputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe19c660a7005bd457bccf88edd14029b74f7eed7c7c135d8552d7eed0b5357e0",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0xA5379d69D32555d2a75E0010e09091D990F6A975",
    "transactionIndex": 291,
    "gasUsed": "3982375",
    "logsBloom": "0x
    "blockHash": "0x79fc43ec6de5f32c869475b006d6ab64aa5bfe0eea9890790ba23ef8f019352f",
    "transactionHash": "0xe19c660a7005bd457bccf88edd14029b74f7eed7c7c135d8552d7eed0b5357e0",
    "logs": [
      {
        "transactionIndex": 291,
        "blockNumber": 13404686,
        "transactionHash": "0xe19c660a7005bd457bccf88edd14029b74f7eed7c7c135d8552d7eed0b5357e0",
        "address": "0x47F7b9F68060d324C1868303220002263b70a46B",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a5379d69d32555d2a75e0010e09091d990f6a975",
          "0x000000000000000000000000d57b41649f822c51a73c44ba0b3da4a880af0029"
        ],
        "data": "0x",
        "logIndex": 362,
        "blockHash": "0x79fc43ec6de5f32c869475b006d6ab64aa5bfe0eea9890790ba23ef8f019352f"
      },
      {
        "transactionIndex": 291,
        "blockNumber": 13404686,
        "transactionHash": "0xe19c660a7005bd457bccf88edd14029b74f7eed7c7c135d8552d7eed0b5357e0",
        "address": "0x47F7b9F68060d324C1868303220002263b70a46B",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x000000000000000000000000a5379d69d32555d2a75e0010e09091d990f6a975",
          "0x000000000000000000000000d57b41649f822c51a73c44ba0b3da4a880af0029"
        ],
        "data": "0x",
        "logIndex": 363,
        "blockHash": "0x79fc43ec6de5f32c869475b006d6ab64aa5bfe0eea9890790ba23ef8f019352f"
      },
      {
        "transactionIndex": 291,
        "blockNumber": 13404686,
        "transactionHash": "0xe19c660a7005bd457bccf88edd14029b74f7eed7c7c135d8552d7eed0b5357e0",
        "address": "0xD57b41649f822C51a73C44Ba0B3da4A880aF0029",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x000000000000000000000000a5379d69d32555d2a75e0010e09091d990f6a975",
          "0x00000000000000000000000047f7b9f68060d324c1868303220002263b70a46b"
        ],
        "data": "0x",
        "logIndex": 364,
        "blockHash": "0x79fc43ec6de5f32c869475b006d6ab64aa5bfe0eea9890790ba23ef8f019352f"
      },
      {
        "transactionIndex": 291,
        "blockNumber": 13404686,
        "transactionHash": "0xe19c660a7005bd457bccf88edd14029b74f7eed7c7c135d8552d7eed0b5357e0",
        "address": "0x47F7b9F68060d324C1868303220002263b70a46B",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x000000000000000000000000a4f1671d3aee73c05b552d57f2d16d3cfcbd0217",
          "0x000000000000000000000000a5379d69d32555d2a75e0010e09091d990f6a975"
        ],
        "data": "0x",
        "logIndex": 365,
        "blockHash": "0x79fc43ec6de5f32c869475b006d6ab64aa5bfe0eea9890790ba23ef8f019352f"
      }
    ],
    "blockNumber": 13404686,
    "cumulativeGasUsed": "24404870",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa4F1671d3Aee73C05b552d57f2d16d3cfcBd0217",
    "0xbA4cFE5741b357FA371b506e5db0774aBFeCf8Fc"
  ],
  "solcInputHash": "f0b4843cb2f9b6a19b9bcfc697877298",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vvsp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressListExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalanceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidationLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPoolIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEverything\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limit\",\"type\":\"uint256[]\"}],\"name\":\"updateLiquidationQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vvsp\",\"outputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sweepErc20(address)\":{\"details\":\"sweep given token to vsp pool\"},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rebalance()\":{\"notice\":\"withdraw Vtoken from vvsp => Deposit vpool => withdraw collateral => swap in uni for VSP => transfer vsp to vvsp pool VETH => ETH => VSP\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/VSPStrategy.sol\":\"VSPStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n */\\ncontract Pausable is Context {\\n    event Paused(address account);\\n    event Shutdown(address account);\\n    event Unpaused(address account);\\n    event Open(address account);\\n\\n    bool public paused;\\n    bool public stopEverything;\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n    modifier whenPaused() {\\n        require(paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!stopEverything, \\\"Pausable: shutdown\\\");\\n        _;\\n    }\\n\\n    modifier whenShutdown() {\\n        require(stopEverything, \\\"Pausable: not shutdown\\\");\\n        _;\\n    }\\n\\n    /// @dev Pause contract operations, if contract is not paused.\\n    function _pause() internal virtual whenNotPaused {\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n    function _unpause() internal virtual whenPaused whenNotShutdown {\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /// @dev Shutdown contract operations, if not already shutdown.\\n    function _shutdown() internal virtual whenNotShutdown {\\n        stopEverything = true;\\n        paused = true;\\n        emit Shutdown(_msgSender());\\n    }\\n\\n    /// @dev Open contract operations, if contract is in shutdown state\\n    function _open() internal virtual whenShutdown {\\n        stopEverything = false;\\n        emit Open(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x000c693be655543f171076ff349e862756fa894f910721e2c87e08cce4354c55\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../uniswap/IUniswapV2Router02.sol\\\";\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs)\\n        external\\n        returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0x7d7c7883945a820f79d73af04bded8629103c7adf9f9a6e8ec12908115628137\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x796333072570a67a7ad356ee420a80edf7804268b6a31fcbe7836e3756a1916d\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe26d2ad5341fe167f03bdf9b4d74e1c69ae0980b08fbd83e7041026c5b961185\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function aaveReferralCode() external view returns (uint16);\\n\\n    function feeCollector(address) external view returns (address);\\n\\n    function founderFee() external view returns (uint256);\\n\\n    function founderVault() external view returns (address);\\n\\n    function interestFee(address) external view returns (uint256);\\n\\n    function isPool(address) external view returns (bool);\\n\\n    function pools() external view returns (address);\\n\\n    function strategy(address) external view returns (address);\\n\\n    function rebalanceFriction(address) external view returns (uint256);\\n\\n    function poolRewards(address) external view returns (address);\\n\\n    function treasuryPool() external view returns (address);\\n\\n    function uniswapRouter() external view returns (address);\\n\\n    function withdrawFee(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e0e894c9edd2e0f954e10c4432d91a76b45fc45d69c3bb5d1eb42fc7e815c3d\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function beforeWithdraw() external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawAll() external;\\n\\n    function isUpgradable() external view returns (bool);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function totalLocked() external view returns (uint256);\\n\\n    //Lifecycle functions\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xcc18dc44c0440999e8c1d20a03d0c10db03e517a6adb0df655802b1b4770ac41\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function approveToken() external;\\n\\n    function deposit() external payable;\\n\\n    function deposit(uint256) external;\\n\\n    function multiTransfer(uint256[] memory) external returns (bool);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function rebalance() external;\\n\\n    function resetApproval() external;\\n\\n    function sweepErc20(address) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function withdrawETH(uint256) external;\\n\\n    function withdrawByStrategy(uint256) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPricePerShare() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd7e6b4863520289099293550577c2423b425a5e6bc8ed35bd808ef3b8a90e5c4\",\"license\":\"MIT\"},\"contracts/strategies/OraclesBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IController.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../Pausable.sol\\\";\\n\\nabstract contract OraclesBase is Pausable {\\n    using SafeERC20 for IERC20;\\n    IController public immutable controller;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant VSP = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n    ISwapManager public swapManager = ISwapManager(0xe382d9f2394A359B01006faa8A1864b8a60d2710);\\n\\n    event UpdatedOracleConfig(\\n        uint256 oldPeriod,\\n        uint256 newPeriod,\\n        uint256 oldRouterIdx,\\n        uint256 newRouterIdx\\n    );\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n\\n    constructor(address _controller) public {\\n        controller = IController(_controller);\\n    }\\n\\n    modifier onlyController() {\\n        require(_msgSender() == address(controller), \\\"Caller is not the controller\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyController {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyController {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyController {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to)\\n        internal\\n        pure\\n        returns (address[] memory path)\\n    {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        (uint256 rate, uint256 lastUpdate, ) =\\n            swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6fae76486b6156760efec750116a04064084f668ef95c11fd9052847d3a5b335\",\"license\":\"MIT\"},\"contracts/strategies/VSPStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./OraclesBase.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../../sol-address-list/contracts/interfaces/IAddressListExt.sol\\\";\\nimport \\\"../../sol-address-list/contracts/interfaces/IAddressListFactory.sol\\\";\\n\\ncontract VSPStrategy is OraclesBase {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public lastRebalanceBlock;    \\n    IVesperPool public immutable vvsp;\\n    IAddressListExt public immutable keepers;\\n    uint256 public nextPoolIdx;\\n    address[] public pools;\\n    uint256[] public liquidationLimit;\\n    string public constant NAME = \\\"Strategy-VSP\\\";\\n    string public constant VERSION = \\\"2.0.3\\\";\\n\\n    constructor(address _controller, address _vvsp) public OraclesBase(_controller) { \\n        vvsp = IVesperPool(_vvsp);\\n        IAddressListFactory factory =\\n            IAddressListFactory(0xD57b41649f822C51a73C44Ba0B3da4A880aF0029);\\n        IAddressListExt _keepers = IAddressListExt(factory.createList());\\n        _keepers.grantRole(keccak256(\\\"LIST_ADMIN\\\"), _controller);\\n        keepers = _keepers;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(keepers.contains(_msgSender()), \\\"caller-is-not-keeper\\\");\\n        _;\\n    }\\n\\n    function pause() external onlyController {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyController {\\n        _unpause();\\n    }\\n\\n    function updateLiquidationQueue(address[] calldata _pools, uint256[] calldata _limit)\\n        external\\n        onlyController\\n    {\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            require(controller.isPool(_pools[i]), \\\"Not a valid pool\\\");\\n            require(_limit[i] != 0, \\\"Limit cannot be zero\\\");\\n        }\\n        pools = _pools;\\n        liquidationLimit = _limit;\\n        nextPoolIdx = 0;\\n    }\\n\\n    function isUpgradable() external view returns (bool) {\\n        return IERC20(vvsp.token()).balanceOf(address(this)) == 0;\\n    }\\n\\n    function pool() external view returns (address) {\\n        return address(vvsp);\\n    }\\n\\n    /**\\n        withdraw Vtoken from vvsp => Deposit vpool => withdraw collateral => swap in uni for VSP => transfer vsp to vvsp pool\\n        VETH => ETH => VSP\\n     */\\n    function rebalance() external whenNotPaused onlyKeeper {\\n        require(\\n            block.number - lastRebalanceBlock >= controller.rebalanceFriction(address(vvsp)),\\n            \\\"Can not rebalance\\\"\\n        );\\n        lastRebalanceBlock = block.number;\\n\\n        if (nextPoolIdx == pools.length) {\\n            nextPoolIdx = 0;\\n        }\\n\\n        IVesperPool _poolToken = IVesperPool(pools[nextPoolIdx]);\\n        uint256 _balance = _poolToken.balanceOf(address(vvsp));\\n        if (_balance != 0 && address(_poolToken) != address(vvsp)) {\\n            if (_balance > liquidationLimit[nextPoolIdx]) {\\n                _balance = liquidationLimit[nextPoolIdx];\\n            }\\n            _rebalanceEarned(_poolToken, _balance);\\n        }\\n        nextPoolIdx++;\\n    }\\n\\n    /// @dev sweep given token to vsp pool\\n    function sweepErc20(address _fromToken) external {\\n        uint256 amount = IERC20(_fromToken).balanceOf(address(this));\\n        IERC20(_fromToken).safeTransfer(address(vvsp), amount);\\n    }\\n\\n    function _rebalanceEarned(IVesperPool _poolToken, uint256 _amt) internal {\\n        IERC20(address(_poolToken)).safeTransferFrom(address(vvsp), address(this), _amt);\\n        _poolToken.withdraw(_amt);\\n        IERC20 from = IERC20(_poolToken.token());\\n        IERC20 vsp = IERC20(vvsp.token());\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(\\n                address(from),\\n                address(vsp),\\n                from.balanceOf(address(this))\\n            );\\n        if (amountOut != 0) {\\n            from.safeApprove(address(swapManager.ROUTERS(rIdx)), 0);\\n            from.safeApprove(address(swapManager.ROUTERS(rIdx)), from.balanceOf(address(this)));\\n            uint256 minAmtOut =\\n                (swapSlippage != 10000)\\n                    ? _calcAmtOutAfterSlippage(\\n                        _getOracleRate(_simpleOraclePath(VSP, _poolToken.token()), amountOut),\\n                        swapSlippage\\n                    )\\n                    : 1;\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                from.balanceOf(address(this)),\\n                minAmtOut,\\n                path,\\n                address(this),\\n                now + 30\\n            );\\n            vsp.safeTransfer(address(vvsp), vsp.balanceOf(address(this)));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cc0ba4e61baf70eeba7bfd6fd9c52e78cff79cd5be7e50a646f495b64a0bab2\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\ninterface IAddressList {\\n    event AddressUpdated(address indexed a, address indexed sender);\\n    event AddressRemoved(address indexed a, address indexed sender);\\n\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0565d70a23098bfc657a785ff308775bc858843be9bb45f75616d9cb03d43a1\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressListExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\nimport \\\"./IAddressList.sol\\\";\\n\\ninterface IAddressListExt is IAddressList {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x4433c06590d8a1b8559cda7f60e67d9ae621a99490bcbf1936c70afeabf954b5\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\ninterface IAddressListFactory {\\n    event ListCreated(address indexed _sender, address indexed _newList);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0xd8a8c8f165891fada8711964a0de5d525b3ab62c37d6dde4108e90361bf4cc7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052610e106001556000600255612710600355600480546001600160a01b03191673e382d9f2394a359b01006faa8a1864b8a60d27101790553480156200004857600080fd5b50604051620028ba380380620028ba833981810160405260408110156200006e57600080fd5b5080516020918201516001600160601b0319606083811b821660805282901b1660a05260408051630fab4d2560e01b815290519293919273d57b41649f822c51a73c44ba0b3da4a880af0029926000928492630fab4d259260048084019391929182900301818787803b158015620000e557600080fd5b505af1158015620000fa573d6000803e3d6000fd5b505050506040513d60208110156200011157600080fd5b505160408051632f2ff15d60e01b81527f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a660048201526001600160a01b038781166024830152915192935090831691632f2ff15d9160448082019260009290919082900301818387803b1580156200018857600080fd5b505af11580156200019d573d6000803e3d6000fd5b50505050606081811b6001600160601b03191660c05260805160a05190821c9550901c92506001600160a01b0316905061266f6200024b60003980610b205280610efe52508061065252806108ac5280610c375280610d505280610de45280610f225280611208528061137952806114845280611b6852508061044752806104cd528061069a528061073352806109b45280610c085280610e7b5280610f6e5280611233525061266f6000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637517f9b8116100de578063a3f4df7e11610097578063cd2d7ebe11610071578063cd2d7ebe14610407578063d9fe3eae1461040f578063f77c479114610435578063ffa1ad741461043d57610173565b8063a3f4df7e1461034a578063a923b2a6146103c7578063ac4afa38146103ea57610173565b80637517f9b81461031a5780637d7c2a1c14610322578063810d36d91461032a5780638456cb5914610332578063951dc22c1461033a578063973a59c11461034257610173565b80634938649a116101305780634938649a146102a35780634c36fad7146102bf5780635479d940146102e55780635c975abb146102ed57806367f5e4b8146102f5578063709d039d1461031257610173565b8063044a1ef71461017857806316f0115b146102385780631a7ec4a11461025c5780631aedeabe1461028b5780633f4ba83a1461029357806342189c8f1461029b575b600080fd5b6102366004803603604081101561018e57600080fd5b810190602081018135600160201b8111156101a857600080fd5b8201836020820111156101ba57600080fd5b803590602001918460208302840111600160201b831117156101db57600080fd5b919390929091602081019035600160201b8111156101f857600080fd5b82018360208201111561020a57600080fd5b803590602001918460208302840111600160201b8311171561022b57600080fd5b509092509050610445565b005b610240610650565b604080516001600160a01b039092168252519081900360200190f35b6102796004803603602081101561027257600080fd5b5035610674565b60408051918252519081900360200190f35b610279610692565b610236610698565b61027961071d565b6102ab610723565b604080519115158252519081900360200190f35b610236600480360360208110156102d557600080fd5b50356001600160a01b0316610731565b6102ab6108a8565b6102ab6109a9565b6102366004803603602081101561030b57600080fd5b50356109b2565b610240610abe565b610279610acd565b610236610ad3565b610279610e73565b610236610e79565b610240610efc565b610240610f20565b610352610f44565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038c578181015183820152602001610374565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610236600480360360408110156103dd57600080fd5b5080359060200135610f6c565b6102406004803603602081101561040057600080fd5b503561114f565b610279611176565b6102366004803603602081101561042557600080fd5b50356001600160a01b031661117c565b610240611231565b610352611255565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610477611276565b6001600160a01b0316146104c0576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b60005b8381101561062a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb786868481811061050657fe5b905060200201356001600160a01b03166040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561055357600080fd5b505afa158015610567573d6000803e3d6000fd5b505050506040513d602081101561057d57600080fd5b50516105c3576040805162461bcd60e51b815260206004820152601060248201526f139bdd0818481d985b1a59081c1bdbdb60821b604482015290519081900360640190fd5b8282828181106105cf57fe5b9050602002013560001415610622576040805162461bcd60e51b81526020600482015260146024820152734c696d69742063616e6e6f74206265207a65726f60601b604482015290519081900360640190fd5b6001016104c3565b50610637600785856124b5565b5061064460088383612518565b50506000600655505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6008818154811061068157fe5b600091825260209091200154905081565b60035481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106ca611276565b6001600160a01b031614610713576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b61071b61127a565b565b60015481565b600054610100900460ff1681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610763611276565b6001600160a01b0316146107ac576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b6001600160a01b0381166107fc576040805162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015290519081900360640190fd5b6004546001600160a01b038281169116141561084c576040805162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b604482015290519081900360640190fd5b6004546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600480546001600160a01b0319166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d602081101561092d57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561097757600080fd5b505afa15801561098b573d6000803e3d6000fd5b505050506040513d60208110156109a157600080fd5b505115905090565b60005460ff1681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109e4611276565b6001600160a01b031614610a2d576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b612710811115610a7d576040805162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015290519081900360640190fd5b600354604080519182526020820183905280517ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f829281900390910190a1600355565b6004546001600160a01b031681565b60055481565b60005460ff1615610b1e576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635dbe47e8610b55611276565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d6020811015610bbc57600080fd5b5051610c06576040805162461bcd60e51b815260206004820152601460248201527331b0b63632b916b4b996b737ba16b5b2b2b832b960611b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636a2b11767f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d6020811015610cbd57600080fd5b505160055443031015610d0b576040805162461bcd60e51b815260206004820152601160248201527043616e206e6f7420726562616c616e636560781b604482015290519081900360640190fd5b436005556007546006541415610d215760006006555b6000600760065481548110610d3257fe5b6000918252602080832090910154604080516370a0823160e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166004830152915191909216945084926370a082319260248082019391829003018186803b158015610daa57600080fd5b505afa158015610dbe573d6000803e3d6000fd5b505050506040513d6020811015610dd457600080fd5b505190508015801590610e1957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15610e6657600860065481548110610e2d57fe5b9060005260206000200154811115610e5c57600860065481548110610e4e57fe5b906000526020600020015490505b610e66828261136a565b5050600680546001019055565b60065481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610eab611276565b6001600160a01b031614610ef4576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b61071b611c02565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600c81526020016b053747261746567792d5653560a41b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f9e611276565b6001600160a01b031614610fe7576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b15801561102957600080fd5b505afa15801561103d573d6000803e3d6000fd5b505050506040513d602081101561105357600080fd5b5051811061109f576040805162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b604482015290519081900360640190fd5b816110aa5760015491505b603b82116110f7576040805162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b604482015290519081900360640190fd5b60015460025460408051928352602083018590528281019190915260608201839052517f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9181900360800190a1600191909155600255565b6007818154811061115c57fe5b6000918252602090912001546001600160a01b0316905081565b60025481565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d60208110156111f557600080fd5b5051905061122d6001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083611c83565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405180604001604052806005815260200164322e302e3360d81b81525081565b3390565b60005460ff166112c8576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600054610100900460ff161561131a576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61134d611276565b604080516001600160a01b039092168252519081900360200190a1565b61139f6001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000003084611cda565b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156113e557600080fd5b505af11580156113f9573d6000803e3d6000fd5b505050506000826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143857600080fd5b505afa15801561144c573d6000803e3d6000fd5b505050506040513d602081101561146257600080fd5b505160408051637e062a3560e11b815290519192506000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163fc0c546a916004808301926020929190829003018186803b1580156114ca57600080fd5b505afa1580156114de573d6000803e3d6000fd5b505050506040513d60208110156114f457600080fd5b505160048054604080516370a0823160e01b815230938101939093525192935060609260009283926001600160a01b039081169263e8f983c89289928992908416916370a08231916024808301926020929190829003018186803b15801561155b57600080fd5b505afa15801561156f573d6000803e3d6000fd5b505050506040513d602081101561158557600080fd5b5051604080516001600160e01b031960e087901b1681526001600160a01b039485166004820152929093166024830152604482015290516064808301926000929190829003018186803b1580156115db57600080fd5b505afa1580156115ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052606081101561161857600080fd5b8101908080516040519392919084600160201b82111561163757600080fd5b90830190602082018581111561164c57600080fd5b82518660208202830111600160201b8211171561166857600080fd5b82525081516020918201928201910280838360005b8381101561169557818101518382015260200161167d565b5050505091909101604090815260208301519201519497509095509293505083159150611bf99050576004805460408051636e74a6f760e01b81529283018490525161174a926001600160a01b0390921691636e74a6f7916024808301926020929190829003018186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d602081101561173657600080fd5b50516001600160a01b038716906000611d3a565b6004805460408051636e74a6f760e01b815292830184905251611847926001600160a01b0390921691636e74a6f7916024808301926020929190829003018186803b15801561179857600080fd5b505afa1580156117ac573d6000803e3d6000fd5b505050506040513d60208110156117c257600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561180a57600080fd5b505afa15801561181e573d6000803e3d6000fd5b505050506040513d602081101561183457600080fd5b50516001600160a01b0388169190611d3a565b6000600354612710141561185c5760016118f2565b6118f26118ea6118e4731b40183efb4dd766f11bda7a7c3ad8982e9984218b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b357600080fd5b505afa1580156118c7573d6000803e3d6000fd5b505050506040513d60208110156118dd57600080fd5b5051611e4d565b85611fe2565b6003546120d3565b6004805460408051636e74a6f760e01b8152928301869052519293506001600160a01b031691636e74a6f791602480820192602092909190829003018186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d602081101561196857600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03928316926338ed173992908a16916370a0823191602480820192602092909190829003018186803b1580156119bc57600080fd5b505afa1580156119d0573d6000803e3d6000fd5b505050506040513d60208110156119e657600080fd5b50516040516001600160e01b031960e084901b16815260048101828152602482018690523060648301819052601e42016084840181905260a0604485019081528b5160a48601528b5189958d95929160c4909101906020878101910280838360005b83811015611a60578181015183820152602001611a48565b505050509050019650505050505050600060405180830381600087803b158015611a8957600080fd5b505af1158015611a9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611ac657600080fd5b8101908080516040519392919084600160201b821115611ae557600080fd5b908301906020820185811115611afa57600080fd5b82518660208202830111600160201b82111715611b1657600080fd5b82525081516020918201928201910280838360005b83811015611b43578181015183820152602001611b2b565b505050509190910160408181526370a0823160e01b825230600483015251611bf796507f000000000000000000000000000000000000000000000000000000000000000095506001600160a01b038c1694506370a08231935060248083019350602092829003018186803b158015611bba57600080fd5b505afa158015611bce573d6000803e3d6000fd5b505050506040513d6020811015611be457600080fd5b50516001600160a01b0388169190611c83565b505b50505050505050565b60005460ff1615611c4d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861134d611276565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611cd59084906120e1565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611d349085906120e1565b50505050565b801580611dc0575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611d9257600080fd5b505afa158015611da6573d6000803e3d6000fd5b505050506040513d6020811015611dbc57600080fd5b5051155b611dfb5760405162461bcd60e51b81526004018080602001828103825260368152602001806126046036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611cd59084906120e1565b60606001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21480611e9657506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b15611f1c5760408051600280825260608201835290916020830190803683370190505090508281600081518110611ec957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110611ef757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611fdc565b6040805160038082526080820190925290602082016060803683370190505090508281600081518110611f4b57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600181518110611f8d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110611fbb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b92915050565b60006001835111612030576040805162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b604482015290519081900360640190fd5b50806000805b60018551038110156120cb5761207685828151811061205157fe5b602002602001015186836001018151811061206857fe5b602002602001015185612192565b9093509150816120c3576040805162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b604482015290519081900360640190fd5b600101612036565b505092915050565b612710908103919091020490565b6060612136826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122969092919063ffffffff16565b805190915015611cd55780806020019051602081101561215557600080fd5b5051611cd55760405162461bcd60e51b815260040180806020018281038252602a8152602001806125da602a913960400191505060405180910390fd5b600080600080600460009054906101000a90046001600160a01b03166001600160a01b031663b67bb24d8888886001546002546040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200182815260200195505050505050606060405180830381600087803b15801561222957600080fd5b505af115801561223d573d6000803e3d6000fd5b505050506040513d606081101561225357600080fd5b508051602090910151600154919350915042038111801561227357508115155b15612284575091506001905061228e565b6000809350935050505b935093915050565b60606122a584846000856122af565b90505b9392505050565b6060824710156122f05760405162461bcd60e51b81526004018080602001828103825260268152602001806125946026913960400191505060405180910390fd5b6122f98561240b565b61234a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106123895780518252601f19909201916020918201910161236a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146123eb576040519150601f19603f3d011682016040523d82523d6000602084013e6123f0565b606091505b5091509150612400828286612411565b979650505050505050565b3b151590565b606083156124205750816122a8565b8251156124305782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561247a578181015183820152602001612462565b50505050905090810190601f1680156124a75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215612508579160200282015b828111156125085781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906124d5565b5061251492915061255f565b5090565b828054828255906000526020600020908101928215612553579160200282015b82811115612553578235825591602001919060010190612538565b5061251492915061257e565b5b808211156125145780546001600160a01b0319168155600101612560565b5b80821115612514576000815560010161257f56fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c43616c6c6572206973206e6f742074686520636f6e74726f6c6c6572000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212206b5d2ecd111f77e3f7a42daa3c24dcb69b1ed5daec092e36aa0b94e3167cbb4b64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80637517f9b8116100de578063a3f4df7e11610097578063cd2d7ebe11610071578063cd2d7ebe14610407578063d9fe3eae1461040f578063f77c479114610435578063ffa1ad741461043d57610173565b8063a3f4df7e1461034a578063a923b2a6146103c7578063ac4afa38146103ea57610173565b80637517f9b81461031a5780637d7c2a1c14610322578063810d36d91461032a5780638456cb5914610332578063951dc22c1461033a578063973a59c11461034257610173565b80634938649a116101305780634938649a146102a35780634c36fad7146102bf5780635479d940146102e55780635c975abb146102ed57806367f5e4b8146102f5578063709d039d1461031257610173565b8063044a1ef71461017857806316f0115b146102385780631a7ec4a11461025c5780631aedeabe1461028b5780633f4ba83a1461029357806342189c8f1461029b575b600080fd5b6102366004803603604081101561018e57600080fd5b810190602081018135600160201b8111156101a857600080fd5b8201836020820111156101ba57600080fd5b803590602001918460208302840111600160201b831117156101db57600080fd5b919390929091602081019035600160201b8111156101f857600080fd5b82018360208201111561020a57600080fd5b803590602001918460208302840111600160201b8311171561022b57600080fd5b509092509050610445565b005b610240610650565b604080516001600160a01b039092168252519081900360200190f35b6102796004803603602081101561027257600080fd5b5035610674565b60408051918252519081900360200190f35b610279610692565b610236610698565b61027961071d565b6102ab610723565b604080519115158252519081900360200190f35b610236600480360360208110156102d557600080fd5b50356001600160a01b0316610731565b6102ab6108a8565b6102ab6109a9565b6102366004803603602081101561030b57600080fd5b50356109b2565b610240610abe565b610279610acd565b610236610ad3565b610279610e73565b610236610e79565b610240610efc565b610240610f20565b610352610f44565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038c578181015183820152602001610374565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610236600480360360408110156103dd57600080fd5b5080359060200135610f6c565b6102406004803603602081101561040057600080fd5b503561114f565b610279611176565b6102366004803603602081101561042557600080fd5b50356001600160a01b031661117c565b610240611231565b610352611255565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610477611276565b6001600160a01b0316146104c0576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b60005b8381101561062a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb786868481811061050657fe5b905060200201356001600160a01b03166040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561055357600080fd5b505afa158015610567573d6000803e3d6000fd5b505050506040513d602081101561057d57600080fd5b50516105c3576040805162461bcd60e51b815260206004820152601060248201526f139bdd0818481d985b1a59081c1bdbdb60821b604482015290519081900360640190fd5b8282828181106105cf57fe5b9050602002013560001415610622576040805162461bcd60e51b81526020600482015260146024820152734c696d69742063616e6e6f74206265207a65726f60601b604482015290519081900360640190fd5b6001016104c3565b50610637600785856124b5565b5061064460088383612518565b50506000600655505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6008818154811061068157fe5b600091825260209091200154905081565b60035481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106ca611276565b6001600160a01b031614610713576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b61071b61127a565b565b60015481565b600054610100900460ff1681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610763611276565b6001600160a01b0316146107ac576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b6001600160a01b0381166107fc576040805162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015290519081900360640190fd5b6004546001600160a01b038281169116141561084c576040805162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b604482015290519081900360640190fd5b6004546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600480546001600160a01b0319166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d602081101561092d57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561097757600080fd5b505afa15801561098b573d6000803e3d6000fd5b505050506040513d60208110156109a157600080fd5b505115905090565b60005460ff1681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109e4611276565b6001600160a01b031614610a2d576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b612710811115610a7d576040805162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015290519081900360640190fd5b600354604080519182526020820183905280517ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f829281900390910190a1600355565b6004546001600160a01b031681565b60055481565b60005460ff1615610b1e576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635dbe47e8610b55611276565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d6020811015610bbc57600080fd5b5051610c06576040805162461bcd60e51b815260206004820152601460248201527331b0b63632b916b4b996b737ba16b5b2b2b832b960611b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636a2b11767f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d6020811015610cbd57600080fd5b505160055443031015610d0b576040805162461bcd60e51b815260206004820152601160248201527043616e206e6f7420726562616c616e636560781b604482015290519081900360640190fd5b436005556007546006541415610d215760006006555b6000600760065481548110610d3257fe5b6000918252602080832090910154604080516370a0823160e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166004830152915191909216945084926370a082319260248082019391829003018186803b158015610daa57600080fd5b505afa158015610dbe573d6000803e3d6000fd5b505050506040513d6020811015610dd457600080fd5b505190508015801590610e1957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15610e6657600860065481548110610e2d57fe5b9060005260206000200154811115610e5c57600860065481548110610e4e57fe5b906000526020600020015490505b610e66828261136a565b5050600680546001019055565b60065481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610eab611276565b6001600160a01b031614610ef4576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b61071b611c02565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600c81526020016b053747261746567792d5653560a41b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f9e611276565b6001600160a01b031614610fe7576040805162461bcd60e51b815260206004820152601c60248201526000805160206125ba833981519152604482015290519081900360640190fd5b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b15801561102957600080fd5b505afa15801561103d573d6000803e3d6000fd5b505050506040513d602081101561105357600080fd5b5051811061109f576040805162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b604482015290519081900360640190fd5b816110aa5760015491505b603b82116110f7576040805162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b604482015290519081900360640190fd5b60015460025460408051928352602083018590528281019190915260608201839052517f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9181900360800190a1600191909155600255565b6007818154811061115c57fe5b6000918252602090912001546001600160a01b0316905081565b60025481565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d60208110156111f557600080fd5b5051905061122d6001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083611c83565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405180604001604052806005815260200164322e302e3360d81b81525081565b3390565b60005460ff166112c8576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600054610100900460ff161561131a576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61134d611276565b604080516001600160a01b039092168252519081900360200190a1565b61139f6001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000003084611cda565b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156113e557600080fd5b505af11580156113f9573d6000803e3d6000fd5b505050506000826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143857600080fd5b505afa15801561144c573d6000803e3d6000fd5b505050506040513d602081101561146257600080fd5b505160408051637e062a3560e11b815290519192506000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163fc0c546a916004808301926020929190829003018186803b1580156114ca57600080fd5b505afa1580156114de573d6000803e3d6000fd5b505050506040513d60208110156114f457600080fd5b505160048054604080516370a0823160e01b815230938101939093525192935060609260009283926001600160a01b039081169263e8f983c89289928992908416916370a08231916024808301926020929190829003018186803b15801561155b57600080fd5b505afa15801561156f573d6000803e3d6000fd5b505050506040513d602081101561158557600080fd5b5051604080516001600160e01b031960e087901b1681526001600160a01b039485166004820152929093166024830152604482015290516064808301926000929190829003018186803b1580156115db57600080fd5b505afa1580156115ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052606081101561161857600080fd5b8101908080516040519392919084600160201b82111561163757600080fd5b90830190602082018581111561164c57600080fd5b82518660208202830111600160201b8211171561166857600080fd5b82525081516020918201928201910280838360005b8381101561169557818101518382015260200161167d565b5050505091909101604090815260208301519201519497509095509293505083159150611bf99050576004805460408051636e74a6f760e01b81529283018490525161174a926001600160a01b0390921691636e74a6f7916024808301926020929190829003018186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d602081101561173657600080fd5b50516001600160a01b038716906000611d3a565b6004805460408051636e74a6f760e01b815292830184905251611847926001600160a01b0390921691636e74a6f7916024808301926020929190829003018186803b15801561179857600080fd5b505afa1580156117ac573d6000803e3d6000fd5b505050506040513d60208110156117c257600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561180a57600080fd5b505afa15801561181e573d6000803e3d6000fd5b505050506040513d602081101561183457600080fd5b50516001600160a01b0388169190611d3a565b6000600354612710141561185c5760016118f2565b6118f26118ea6118e4731b40183efb4dd766f11bda7a7c3ad8982e9984218b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b357600080fd5b505afa1580156118c7573d6000803e3d6000fd5b505050506040513d60208110156118dd57600080fd5b5051611e4d565b85611fe2565b6003546120d3565b6004805460408051636e74a6f760e01b8152928301869052519293506001600160a01b031691636e74a6f791602480820192602092909190829003018186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d602081101561196857600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03928316926338ed173992908a16916370a0823191602480820192602092909190829003018186803b1580156119bc57600080fd5b505afa1580156119d0573d6000803e3d6000fd5b505050506040513d60208110156119e657600080fd5b50516040516001600160e01b031960e084901b16815260048101828152602482018690523060648301819052601e42016084840181905260a0604485019081528b5160a48601528b5189958d95929160c4909101906020878101910280838360005b83811015611a60578181015183820152602001611a48565b505050509050019650505050505050600060405180830381600087803b158015611a8957600080fd5b505af1158015611a9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611ac657600080fd5b8101908080516040519392919084600160201b821115611ae557600080fd5b908301906020820185811115611afa57600080fd5b82518660208202830111600160201b82111715611b1657600080fd5b82525081516020918201928201910280838360005b83811015611b43578181015183820152602001611b2b565b505050509190910160408181526370a0823160e01b825230600483015251611bf796507f000000000000000000000000000000000000000000000000000000000000000095506001600160a01b038c1694506370a08231935060248083019350602092829003018186803b158015611bba57600080fd5b505afa158015611bce573d6000803e3d6000fd5b505050506040513d6020811015611be457600080fd5b50516001600160a01b0388169190611c83565b505b50505050505050565b60005460ff1615611c4d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861134d611276565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611cd59084906120e1565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611d349085906120e1565b50505050565b801580611dc0575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611d9257600080fd5b505afa158015611da6573d6000803e3d6000fd5b505050506040513d6020811015611dbc57600080fd5b5051155b611dfb5760405162461bcd60e51b81526004018080602001828103825260368152602001806126046036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611cd59084906120e1565b60606001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21480611e9657506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b15611f1c5760408051600280825260608201835290916020830190803683370190505090508281600081518110611ec957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110611ef757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611fdc565b6040805160038082526080820190925290602082016060803683370190505090508281600081518110611f4b57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600181518110611f8d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110611fbb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b92915050565b60006001835111612030576040805162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b604482015290519081900360640190fd5b50806000805b60018551038110156120cb5761207685828151811061205157fe5b602002602001015186836001018151811061206857fe5b602002602001015185612192565b9093509150816120c3576040805162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b604482015290519081900360640190fd5b600101612036565b505092915050565b612710908103919091020490565b6060612136826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122969092919063ffffffff16565b805190915015611cd55780806020019051602081101561215557600080fd5b5051611cd55760405162461bcd60e51b815260040180806020018281038252602a8152602001806125da602a913960400191505060405180910390fd5b600080600080600460009054906101000a90046001600160a01b03166001600160a01b031663b67bb24d8888886001546002546040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200182815260200195505050505050606060405180830381600087803b15801561222957600080fd5b505af115801561223d573d6000803e3d6000fd5b505050506040513d606081101561225357600080fd5b508051602090910151600154919350915042038111801561227357508115155b15612284575091506001905061228e565b6000809350935050505b935093915050565b60606122a584846000856122af565b90505b9392505050565b6060824710156122f05760405162461bcd60e51b81526004018080602001828103825260268152602001806125946026913960400191505060405180910390fd5b6122f98561240b565b61234a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106123895780518252601f19909201916020918201910161236a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146123eb576040519150601f19603f3d011682016040523d82523d6000602084013e6123f0565b606091505b5091509150612400828286612411565b979650505050505050565b3b151590565b606083156124205750816122a8565b8251156124305782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561247a578181015183820152602001612462565b50505050905090810190601f1680156124a75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215612508579160200282015b828111156125085781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906124d5565b5061251492915061255f565b5090565b828054828255906000526020600020908101928215612553579160200282015b82811115612553578235825591602001919060010190612538565b5061251492915061257e565b5b808211156125145780546001600160a01b0319168155600101612560565b5b80821115612514576000815560010161257f56fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c43616c6c6572206973206e6f742074686520636f6e74726f6c6c6572000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212206b5d2ecd111f77e3f7a42daa3c24dcb69b1ed5daec092e36aa0b94e3167cbb4b64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "sweepErc20(address)": {
        "details": "sweep given token to vsp pool"
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rebalance()": {
        "notice": "withdraw Vtoken from vvsp => Deposit vpool => withdraw collateral => swap in uni for VSP => transfer vsp to vvsp pool VETH => ETH => VSP"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3515,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3517,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "stopEverything",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17465,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17468,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 17471,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 17492,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "swapManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISwapManager)6758"
      },
      {
        "astId": 20729,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "lastRebalanceBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 20735,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "nextPoolIdx",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 20738,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "pools",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 20741,
        "contract": "contracts/strategies/VSPStrategy.sol:VSPStrategy",
        "label": "liquidationLimit",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISwapManager)6758": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}