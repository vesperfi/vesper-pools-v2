{
  "address": "0x80d426D65D926dF121dc58C18D043B73e998CE2b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_share",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "VTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "VTokenRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HIGH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "addVToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAutoTopUpEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTopUpEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "payees",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_payee",
          "type": "address"
        }
      ],
      "name": "releaseEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vToken",
          "type": "address"
        }
      ],
      "name": "removeVToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "share",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleAutoTopUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleTopUpStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd9692f8ac3b2fb335420ef7cd13e8e96942c1d72bb72391d137f95da14fe7053",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x80d426D65D926dF121dc58C18D043B73e998CE2b",
    "transactionIndex": 120,
    "gasUsed": "1916806",
    "logsBloom": "0x
    "blockHash": "0x08c98cf05903f3354adfe256a9cf3440c7c5a9ae7ec32a9433650b4c252125fb",
    "transactionHash": "0xd9692f8ac3b2fb335420ef7cd13e8e96942c1d72bb72391d137f95da14fe7053",
    "logs": [
      {
        "transactionIndex": 120,
        "blockNumber": 13679385,
        "transactionHash": "0xd9692f8ac3b2fb335420ef7cd13e8e96942c1d72bb72391d137f95da14fe7053",
        "address": "0x80d426D65D926dF121dc58C18D043B73e998CE2b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000df826ff6518e609e4cee86299d40611c148099d5"
        ],
        "data": "0x",
        "logIndex": 183,
        "blockHash": "0x08c98cf05903f3354adfe256a9cf3440c7c5a9ae7ec32a9433650b4c252125fb"
      },
      {
        "transactionIndex": 120,
        "blockNumber": 13679385,
        "transactionHash": "0xd9692f8ac3b2fb335420ef7cd13e8e96942c1d72bb72391d137f95da14fe7053",
        "address": "0x80d426D65D926dF121dc58C18D043B73e998CE2b",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac",
          "0x0000000000000000000000009520b477aa81180e6ddc006fc09fb6d3eb4e807a"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000fa0",
        "logIndex": 184,
        "blockHash": "0x08c98cf05903f3354adfe256a9cf3440c7c5a9ae7ec32a9433650b4c252125fb"
      },
      {
        "transactionIndex": 120,
        "blockNumber": 13679385,
        "transactionHash": "0xd9692f8ac3b2fb335420ef7cd13e8e96942c1d72bb72391d137f95da14fe7053",
        "address": "0x80d426D65D926dF121dc58C18D043B73e998CE2b",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac",
          "0x0000000000000000000000009bcdf1130b20856f86267074de136c5902e314fe"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000157c",
        "logIndex": 185,
        "blockHash": "0x08c98cf05903f3354adfe256a9cf3440c7c5a9ae7ec32a9433650b4c252125fb"
      },
      {
        "transactionIndex": 120,
        "blockNumber": 13679385,
        "transactionHash": "0xd9692f8ac3b2fb335420ef7cd13e8e96942c1d72bb72391d137f95da14fe7053",
        "address": "0x80d426D65D926dF121dc58C18D043B73e998CE2b",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac",
          "0x000000000000000000000000f4087b7ab24bde9c445ddd0bc4df257f81277214"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000001f4",
        "logIndex": 186,
        "blockHash": "0x08c98cf05903f3354adfe256a9cf3440c7c5a9ae7ec32a9433650b4c252125fb"
      }
    ],
    "blockNumber": 13679385,
    "cumulativeGasUsed": "13736711",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x9520b477Aa81180E6DdC006Fc09Fb6d3eb4e807A",
      "0x9bcdf1130b20856f86267074de136c5902e314fe",
      "0xf4087b7AB24Bde9c445ddD0bc4DF257F81277214"
    ],
    [
      4000,
      5500,
      500
    ]
  ],
  "solcInputHash": "2f8db376f6a3a7aa705bea1766f09a29",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_share\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"VTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"VTokenRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HIGH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"addVToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoTopUpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTopUpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"releaseEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vToken\",\"type\":\"address\"}],\"name\":\"removeVToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAutoTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTopUpStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract allows to split ERC20 and Ether tokens among a group of accounts. The sender does not need to be aware that the token(s) (revenue) will be split in this way, since it is handled transparently by the contract. The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each account to a number of shares. Of all the fund this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. `RevenueSplitter` follows a pull revenue model. This means that revenue is not automatically forwarded to the accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} or {releaseEther} function.\",\"kind\":\"dev\",\"methods\":{\"addVToken(address,address)\":{\"details\":\"Add vToken for vesper deployer top-up\",\"params\":{\"_oracle\":\"- Chainlink oracle address used for collateral token to ETH estimation Find chainlink oracle details here https://docs.chain.link/docs/ethereum-addresses/ For pool with WETH as collateral token, we do not need _oracle and _oracle can have ZERO address.\",\"_vToken\":\"- Vesper token\"}},\"constructor\":{\"details\":\"Creates an instance of `RevenueSplitter` where each account in `_payees` is assigned token(s) at the matching position in the `_share` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`.\",\"params\":{\"_payees\":\"-  address(es) of payees eligible to receive token(s)\",\"_share\":\"- list of shares, transferred to payee in provided ratio.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"release(address,address)\":{\"details\":\"Transfer of ERC20 token(s) to `payee` based on share and their previous withdrawals.\",\"params\":{\"_asset\":\"- ERC20 token's address\",\"_payee\":\"- payee's address to receive token(s)\"}},\"releaseEther(address)\":{\"details\":\"Transfer of ether to `payee` based on share and their previous withdrawals.\",\"params\":{\"_payee\":\"- payee's address to receive ether\"}},\"removeVToken(address)\":{\"details\":\"Remove vToken for vesper deployer top-up\",\"params\":{\"_vToken\":\"- Vesper token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"toggleAutoTopUp()\":{\"details\":\"Toggle auto top-up to true will enable top-up too.\"},\"toggleTopUpStatus()\":{\"details\":\"Toggle top-up status to false will disable auto top-up too.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"RevenueSplitter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"toggleAutoTopUp()\":{\"notice\":\"Toggle auto top-up\"},\"toggleTopUpStatus()\":{\"notice\":\"Toggle top-up status\"},\"topUp()\":{\"notice\":\"top-up Vesper deployer address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/RevenueSplitter.sol\":\"RevenueSplitter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n// Requried one small change in openzeppelin version of ownable, so imported\\n// source code here. Notice line 26 for change.\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    /**\\n     * @dev Changed _owner from 'private' to 'internal'\\n     */\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n/**\\n * @dev Contract module extends Ownable and provide a way for safe transfer ownership.\\n * Proposed owner has to call acceptOwnership in order to complete ownership trasnfer.\\n */\\ncontract Owned is Ownable {\\n    address private _proposedOwner;\\n\\n    /**\\n     * @dev Initiate transfer ownership of the contract to a new account (`proposedOwner`).\\n     * Can only be called by the current owner. Current owner will still be owner until\\n     * proposed owner accept ownership.\\n     * @param proposedOwner proposed owner address\\n     */\\n    function transferOwnership(address proposedOwner) public override onlyOwner {\\n        //solhint-disable-next-line reason-string\\n        require(proposedOwner != address(0), \\\"Proposed owner is the zero address\\\");\\n        _proposedOwner = proposedOwner;\\n    }\\n\\n    /// @dev Allows proposed owner to accept ownership of the contract.\\n    function acceptOwnership() public {\\n        require(msg.sender == _proposedOwner, \\\"Caller is not the proposed owner\\\");\\n        emit OwnershipTransferred(_owner, _proposedOwner);\\n        _owner = _proposedOwner;\\n        _proposedOwner = address(0);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        _proposedOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xf8fe1b1d930efb5bb31788f0def5ffd4b632b60fcc5d465fc44b4e3ba8129c5b\",\"license\":\"MIT\"},\"contracts/interfaces/chainlink/IAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// chainlink oracles interface\\ninterface IAggregatorV3 {\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x57603057819df82efb1aff2380b2cedcf4388ac8a077e2f4b29e0785e0884ac0\",\"license\":\"MIT\"},\"contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface TokenLike {\\n    function approve(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa91f814ba3bcdf5371f96346e86cd758342fe489a544c3537d6985fceb954dc5\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function approveToken() external;\\n\\n    function deposit() external payable;\\n\\n    function deposit(uint256) external;\\n\\n    function multiTransfer(uint256[] memory) external returns (bool);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function rebalance() external;\\n\\n    function resetApproval() external;\\n\\n    function sweepErc20(address) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function withdrawETH(uint256) external;\\n\\n    function withdrawByStrategy(uint256) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPricePerShare() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd7e6b4863520289099293550577c2423b425a5e6bc8ed35bd808ef3b8a90e5c4\",\"license\":\"MIT\"},\"contracts/strategies/RevenueSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/token/IToken.sol\\\";\\nimport \\\"../interfaces/chainlink/IAggregatorV3.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"./../Owned.sol\\\";\\n\\n/**\\n * @title RevenueSplitter\\n * @dev This contract allows to split ERC20 and Ether tokens among a group of accounts. The sender does not need to be aware\\n * that the token(s) (revenue) will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the fund this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `RevenueSplitter` follows a pull revenue model. This means that revenue is not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} or {releaseEther}\\n * function.\\n */\\ncontract RevenueSplitter is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // events\\n    event PayeeAdded(address indexed payee, uint256 share);\\n    event PaymentReleased(address indexed payee, address indexed asset, uint256 tokens);\\n    event VTokenAdded(address indexed vToken, address indexed oracle);\\n    event VTokenRemoved(address indexed vToken, address indexed oracle);\\n\\n    // Total share.\\n    uint256 public totalShare;\\n    // Total released for an asset.\\n    mapping(address => uint256) public totalReleased;\\n    // Payee's share\\n    mapping(address => uint256) public share;\\n    // Payee's share released for an asset\\n    mapping(address => mapping(address => uint256)) public released;\\n    // list of payees\\n    address[] public payees;\\n    address[] public vTokens;\\n    mapping(address => bool) private isVToken;\\n    mapping(address => address) public oracles; // vToken to collateral token's oracle mapping\\n    address private constant VESPER_DEPLOYER = 0xB5AbDABE50b5193d4dB92a16011792B22bA3Ef51;\\n    uint256 public constant HIGH = 20e18; // 20 Ether\\n    uint256 public constant LOW = 10e18; // 10 Ether\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    bool public isAutoTopUpEnabled;\\n    bool public isTopUpEnabled;\\n\\n    /**\\n     * @dev Creates an instance of `RevenueSplitter` where each account in `_payees` is assigned token(s) at\\n     * the matching position in the `_share` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     * @param _payees -  address(es) of payees eligible to receive token(s)\\n     * @param _share - list of shares, transferred to payee in provided ratio.\\n     */\\n\\n    constructor(address[] memory _payees, uint256[] memory _share) public {\\n        // solhint-disable-next-line max-line-length\\n        require(_payees.length == _share.length, \\\"payees-and-share-length-mismatch\\\");\\n        require(_payees.length > 0, \\\"no-payees\\\");\\n        for (uint256 i = 0; i < _payees.length; i++) {\\n            _addPayee(_payees[i], _share[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add vToken for vesper deployer top-up\\n     * @param _vToken - Vesper token\\n     * @param _oracle - Chainlink oracle address used for collateral token to ETH estimation\\n     * Find chainlink oracle details here https://docs.chain.link/docs/ethereum-addresses/\\n     * For pool with WETH as collateral token, we do not need _oracle and _oracle can have ZERO address.\\n     */\\n    function addVToken(address _vToken, address _oracle) external onlyOwner {\\n        require(_vToken != address(0), \\\"vToken-is-zero-address\\\");\\n        require(!isVToken[_vToken], \\\"duplicate-vToken\\\");\\n        if (IVesperPool(_vToken).token() != WETH) {\\n            require(_oracle != address(0), \\\"oracle-is-zero-address\\\");\\n            oracles[_vToken] = _oracle;\\n        }\\n        vTokens.push(_vToken);\\n        isVToken[_vToken] = true;\\n        emit VTokenAdded(_vToken, _oracle);\\n    }\\n\\n    /**\\n     * @dev Remove vToken for vesper deployer top-up\\n     * @param _vToken - Vesper token\\n     */\\n    function removeVToken(address _vToken) external onlyOwner {\\n        require(_vToken != address(0), \\\"vToken-is-zero-address\\\");\\n        require(isVToken[_vToken], \\\"vToken-not-found\\\");\\n        for (uint256 i = 0; i < vTokens.length; i++) {\\n            if (vTokens[i] == _vToken) {\\n                vTokens[i] = vTokens[vTokens.length - 1];\\n                vTokens.pop();\\n                delete isVToken[_vToken];\\n                emit VTokenRemoved(_vToken, oracles[_vToken]);\\n                delete oracles[_vToken];\\n                break;\\n            }\\n        }\\n    }\\n\\n    //solhint-disable no-empty-blocks\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Transfer of ERC20 token(s) to `payee` based on share and their previous withdrawals.\\n     * @param _payee - payee's address to receive token(s)\\n     * @param _asset - ERC20 token's address\\n     */\\n    function release(address _payee, address _asset) external {\\n        require(share[_payee] > 0, \\\"payee-does-not-have-share\\\");\\n        if (isAutoTopUpEnabled) {\\n            _topUp();\\n        }\\n        uint256 totalReceived = IERC20(_asset).balanceOf(address(this)).add(totalReleased[_asset]);\\n        uint256 tokens = _calculateAndUpdateReleasedTokens(_payee, _asset, totalReceived);\\n        IERC20(_asset).safeTransfer(_payee, tokens);\\n        emit PaymentReleased(_payee, _asset, tokens);\\n    }\\n\\n    /**\\n     * @dev Transfer of ether to `payee` based on share and their previous withdrawals.\\n     * @param _payee - payee's address to receive ether\\n     */\\n    function releaseEther(address payable _payee) external {\\n        require(share[_payee] > 0, \\\"payee-does-not-have-share\\\");\\n        uint256 totalReceived = address(this).balance.add(totalReleased[ETH]);\\n        // find total received amount\\n        uint256 amount = _calculateAndUpdateReleasedTokens(_payee, ETH, totalReceived);\\n        // Transfer Ether to Payee.\\n        Address.sendValue(_payee, amount);\\n        emit PaymentReleased(_payee, ETH, amount);\\n    }\\n\\n    /**\\n     * @notice Toggle auto top-up\\n     * @dev Toggle auto top-up to true will enable top-up too.\\n     */\\n    function toggleAutoTopUp() external onlyOwner {\\n        if (isAutoTopUpEnabled) {\\n            isAutoTopUpEnabled = false;\\n        } else {\\n            isAutoTopUpEnabled = true;\\n            isTopUpEnabled = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Toggle top-up status\\n     * @dev Toggle top-up status to false will disable auto top-up too.\\n     */\\n    function toggleTopUpStatus() external onlyOwner {\\n        if (isTopUpEnabled) {\\n            isTopUpEnabled = false;\\n            isAutoTopUpEnabled = false;\\n        } else {\\n            isTopUpEnabled = true;\\n        }\\n    }\\n\\n    /// @notice top-up Vesper deployer address\\n    function topUp() external {\\n        require(isTopUpEnabled, \\\"top-up-is-disabled\\\");\\n        _topUp();\\n    }\\n\\n    /**\\n     * @dev Get vToken token value in Eth\\n     * @param _vToken - Vesper token\\n     * @param _owner - address owning vToken.\\n     */\\n    function _estimateVTokenValueInETh(IVesperPool _vToken, address _owner)\\n        private\\n        view\\n        returns (uint256 _valueInEth)\\n    {\\n        uint256 _collateralTokenAmount =\\n            _vToken.totalValue().mul(_vToken.balanceOf(_owner)).div(_vToken.totalSupply());\\n        if (_collateralTokenAmount > 0) {\\n            if (_vToken.token() == WETH) {\\n                _valueInEth = _collateralTokenAmount;\\n            } else {\\n                // answer is 1 collateral token price in ETH (18 decimals)\\n                int256 _answer = IAggregatorV3(oracles[address(_vToken)]).latestAnswer();\\n                uint256 _decimals = TokenLike(_vToken.token()).decimals();\\n                _valueInEth = uint256(_answer).mul(_collateralTokenAmount).div(10**_decimals);\\n            }\\n        }\\n    }\\n\\n    /// @dev Top up Vesper deployer address when balance goes below low mark.\\n    function _topUp() private {\\n        uint256 _totalTokenValueInEth = VESPER_DEPLOYER.balance;\\n        if (_totalTokenValueInEth >= LOW) {\\n            return;\\n        }\\n        for (uint256 i = 0; i < vTokens.length; i++) {\\n            _totalTokenValueInEth = _totalTokenValueInEth.add(\\n                _estimateVTokenValueInETh(IVesperPool(vTokens[i]), VESPER_DEPLOYER)\\n            );\\n            if (_totalTokenValueInEth >= LOW) {\\n                return;\\n            }\\n        }\\n        uint256 _want = HIGH.sub(_totalTokenValueInEth);\\n        for (uint256 i = 0; i < vTokens.length; i++) {\\n            uint256 _vTokenBalanceInEth =\\n                _estimateVTokenValueInETh(IVesperPool(vTokens[i]), address(this));\\n            uint256 _tokenToTransfer = IERC20(vTokens[i]).balanceOf(address(this));\\n            if (_want > _vTokenBalanceInEth) {\\n                _want = _want.sub(_vTokenBalanceInEth);\\n                IERC20(vTokens[i]).safeTransfer(VESPER_DEPLOYER, _tokenToTransfer);\\n            } else {\\n                // transfer proportionally\\n                _tokenToTransfer = _want.mul(_tokenToTransfer).div(_vTokenBalanceInEth);\\n                IERC20(vTokens[i]).safeTransfer(VESPER_DEPLOYER, _tokenToTransfer);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate token(s) for `payee` based on share and their previous withdrawals.\\n     * @param _payee - payee's address\\n     * @param _asset - token's address\\n     * return token(s)/ ether to be released\\n     */\\n    function _calculateAndUpdateReleasedTokens(\\n        address _payee,\\n        address _asset,\\n        uint256 _totalReceived\\n    ) private returns (uint256 tokens) {\\n        // find eligible token(s)/ether for a payee\\n        uint256 releasedTokens = released[_payee][_asset];\\n        tokens = _totalReceived.mul(share[_payee]).div(totalShare).sub(releasedTokens);\\n        require(tokens != 0, \\\"payee-is-not-due-for-tokens\\\");\\n        // update released token(s)\\n        released[_payee][_asset] = releasedTokens.add(tokens);\\n        totalReleased[_asset] = totalReleased[_asset].add(tokens);\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param _payee - payee address\\n     * @param _share -  payee's share\\n     */\\n    function _addPayee(address _payee, uint256 _share) private {\\n        require(_payee != address(0), \\\"payee-is-zero-address\\\");\\n        require(_share > 0, \\\"payee-with-zero-share\\\");\\n        require(share[_payee] == 0, \\\"payee-exists-with-share\\\");\\n        payees.push(_payee);\\n        share[_payee] = _share;\\n        totalShare = totalShare.add(_share);\\n        emit PayeeAdded(_payee, _share);\\n    }\\n}\\n\",\"keccak256\":\"0x7069eea595efb0f6c7a8e49c215c4cf14ecd5c00259adcd92dd2ff844ee7ab62\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200228538038062002285833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b5050505090500160405260200180516040519392919084640100000000821115620000e557600080fd5b908301906020820185811115620000fb57600080fd5b82518660208202830111640100000000821117156200011957600080fd5b82525081516020918201928201910280838360005b83811015620001485781810151838201526020016200012e565b50505050905001604052505050600062000167620002a460201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350805182511462000208576040805162461bcd60e51b815260206004820181905260248201527f7061796565732d616e642d73686172652d6c656e6774682d6d69736d61746368604482015290519081900360640190fd5b60008251116200024b576040805162461bcd60e51b81526020600482015260096024820152686e6f2d70617965657360b81b604482015290519081900360640190fd5b60005b82518110156200029b57620002928382815181106200026957fe5b60200260200101518383815181106200027e57fe5b6020026020010151620002a860201b60201c565b6001016200024e565b505050620004e4565b3390565b6001600160a01b03821662000304576040805162461bcd60e51b815260206004820152601560248201527f70617965652d69732d7a65726f2d616464726573730000000000000000000000604482015290519081900360640190fd5b600081116200035a576040805162461bcd60e51b815260206004820152601560248201527f70617965652d776974682d7a65726f2d73686172650000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526003602052604090205415620003c6576040805162461bcd60e51b815260206004820152601760248201527f70617965652d6578697374732d776974682d7368617265000000000000000000604482015290519081900360640190fd5b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b038516908117909155600090815260036020908152604090912083905590546200043c91839062000482811b6200104e17901c565b6001556040805182815290516001600160a01b038416917f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac919081900360200190a25050565b600082820183811015620004dd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b611d9180620004f46000396000f3fe60806040526004361061012e5760003560e01c8063715018a6116100ab578063b73974a11161006f578063b73974a1146103af578063c2001148146103c4578063d79779b2146103f7578063dc29f1de1461042a578063f2fde38b1461043f578063f3c92e8a1461047257610135565b8063715018a6146103135780638da5cb5b1461032857806393cb090e1461033d5780639f17b0f914610367578063addd50991461037c57610135565b8063406072a9116100f2578063406072a91461022d57806348b75044146102685780634d4cadd3146102a35780634d75190a146102b857806363037b0c146102cd57610135565b8063026c42071461013a5780631877bb5c146101615780632ad391ec1461019457806339414afd146101c95780633fc0b8a7146101f257610135565b3661013557005b600080fd5b34801561014657600080fd5b5061014f610487565b60408051918252519081900360200190f35b34801561016d57600080fd5b5061014f6004803603602081101561018457600080fd5b50356001600160a01b031661048d565b3480156101a057600080fd5b506101c7600480360360208110156101b757600080fd5b50356001600160a01b031661049f565b005b3480156101d557600080fd5b506101de61070d565b604080519115158252519081900360200190f35b3480156101fe57600080fd5b506101c76004803603604081101561021557600080fd5b506001600160a01b038135811691602001351661071b565b34801561023957600080fd5b5061014f6004803603604081101561025057600080fd5b506001600160a01b03813581169160200135166109d2565b34801561027457600080fd5b506101c76004803603604081101561028b57600080fd5b506001600160a01b03813581169160200135166109ef565b3480156102af57600080fd5b506101de610b6b565b3480156102c457600080fd5b506101c7610b74565b3480156102d957600080fd5b506102f7600480360360208110156102f057600080fd5b5035610bfe565b604080516001600160a01b039092168252519081900360200190f35b34801561031f57600080fd5b506101c7610c25565b34801561033457600080fd5b506102f7610cc7565b34801561034957600080fd5b506102f76004803603602081101561036057600080fd5b5035610cd6565b34801561037357600080fd5b5061014f610ce3565b34801561038857600080fd5b506102f76004803603602081101561039f57600080fd5b50356001600160a01b0316610cef565b3480156103bb57600080fd5b5061014f610d0a565b3480156103d057600080fd5b506101c7600480360360208110156103e757600080fd5b50356001600160a01b0316610d17565b34801561040357600080fd5b5061014f6004803603602081101561041a57600080fd5b50356001600160a01b0316610e51565b34801561043657600080fd5b506101c7610e63565b34801561044b57600080fd5b506101c76004803603602081101561046257600080fd5b50356001600160a01b0316610ebc565b34801561047e57600080fd5b506101c7610fc2565b60015481565b60036020526000908152604090205481565b6104a76110b1565b6000546001600160a01b039081169116146104f7576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b6001600160a01b03811661054b576040805162461bcd60e51b815260206004820152601660248201527576546f6b656e2d69732d7a65726f2d6164647265737360501b604482015290519081900360640190fd5b6001600160a01b03811660009081526007602052604090205460ff166105ab576040805162461bcd60e51b815260206004820152601060248201526f1d951bdad95b8b5b9bdd0b599bdd5b9960821b604482015290519081900360640190fd5b60005b60065481101561070957816001600160a01b0316600682815481106105cf57fe5b6000918252602090912001546001600160a01b03161415610701576006805460001981019081106105fc57fe5b600091825260209091200154600680546001600160a01b03909216918390811061062257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600680548061065b57fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03848116808452600783526040808520805460ff191690556008909352828420549251929091169290917ffe48082efa5ff0caecfc8a7dfbc427a9910386eb5ecd0ce47e0b5cb549c3459b9190a36001600160a01b038216600090815260086020526040902080546001600160a01b0319169055610709565b6001016105ae565b5050565b600954610100900460ff1681565b6107236110b1565b6000546001600160a01b03908116911614610773576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b6001600160a01b0382166107c7576040805162461bcd60e51b815260206004820152601660248201527576546f6b656e2d69732d7a65726f2d6164647265737360501b604482015290519081900360640190fd5b6001600160a01b03821660009081526007602052604090205460ff1615610828576040805162461bcd60e51b815260206004820152601060248201526f323ab83634b1b0ba3296bb2a37b5b2b760811b604482015290519081900360640190fd5b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087f57600080fd5b505afa158015610893573d6000803e3d6000fd5b505050506040513d60208110156108a957600080fd5b50516001600160a01b03161461093c576001600160a01b03811661090d576040805162461bcd60e51b81526020600482015260166024820152756f7261636c652d69732d7a65726f2d6164647265737360501b604482015290519081900360640190fd5b6001600160a01b03828116600090815260086020526040902080546001600160a01b0319169183169190911790555b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b03858116918217909255600081815260076020526040808220805460ff191690951790945592519184169290917fe3136fbc6700e6caa4fd499370c57e07bd40a24347bf7e04be3950663febe57c9190a35050565b600460209081526000928352604080842090915290825290205481565b6001600160a01b038216600090815260036020526040902054610a55576040805162461bcd60e51b815260206004820152601960248201527870617965652d646f65732d6e6f742d686176652d736861726560381b604482015290519081900360640190fd5b60095460ff1615610a6857610a686110b5565b6001600160a01b03811660008181526002602090815260408083205481516370a0823160e01b815230600482015291519394610af594919390926370a082319260248083019392829003018186803b158015610ac357600080fd5b505afa158015610ad7573d6000803e3d6000fd5b505050506040513d6020811015610aed57600080fd5b50519061104e565b90506000610b048484846112e3565b9050610b1a6001600160a01b03841685836113f7565b826001600160a01b0316846001600160a01b03167f8ac5b3c2902b21b6bbb4d99ec195e28a242cb6a1777804db10b84d91e2006429836040518082815260200191505060405180910390a350505050565b60095460ff1681565b610b7c6110b1565b6000546001600160a01b03908116911614610bcc576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b600954610100900460ff1615610bec576009805461ffff19169055610bfc565b6009805461ff0019166101001790555b565b60058181548110610c0b57fe5b6000918252602090912001546001600160a01b0316905081565b610c2d6110b1565b6000546001600160a01b03908116911614610c7d576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b60068181548110610c0b57fe5b678ac7230489e8000081565b6008602052600090815260409020546001600160a01b031681565b6801158e460913d0000081565b6001600160a01b038116600090815260036020526040902054610d7d576040805162461bcd60e51b815260206004820152601960248201527870617965652d646f65732d6e6f742d686176652d736861726560381b604482015290519081900360640190fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee600090815260026020527f6a26712a1b2f732f4c1fd85f9d6ed8235573aaa2a79aa2bab72c2423a73a9faf54610dc990479061104e565b90506000610dec8373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee846112e3565b9050610df88382611449565b60408051828152905173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee916001600160a01b038616917f8ac5b3c2902b21b6bbb4d99ec195e28a242cb6a1777804db10b84d91e20064299181900360200190a3505050565b60026020526000908152604090205481565b600954610100900460ff16610eb4576040805162461bcd60e51b81526020600482015260126024820152711d1bdc0b5d5c0b5a5ccb591a5cd8589b195960721b604482015290519081900360640190fd5b610bfc6110b5565b610ec46110b1565b6000546001600160a01b03908116911614610f14576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b6001600160a01b038116610f67576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610fca6110b1565b6000546001600160a01b0390811691161461101a576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b60095460ff1615611034576009805460ff19169055610bfc565b6009805461ff001960ff1990911660011716610100179055565b6000828201838110156110a8576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b3390565b73b5abdabe50b5193d4db92a16011792b22ba3ef5131678ac7230489e8000081106110e05750610bfc565b60005b6006548110156111565761113661112f6006838154811061110057fe5b6000918252602090912001546001600160a01b031673b5abdabe50b5193d4db92a16011792b22ba3ef5161152e565b839061104e565b9150678ac7230489e80000821061114e575050610bfc565b6001016110e3565b50600061116c6801158e460913d00000836118a3565b905060005b6006548110156112de5760006111a86006838154811061118d57fe5b6000918252602090912001546001600160a01b03163061152e565b90506000600683815481106111b957fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561120857600080fd5b505afa15801561121c573d6000803e3d6000fd5b505050506040513d602081101561123257600080fd5b50519050818411156112915761124884836118a3565b935061128c73b5abdabe50b5193d4db92a16011792b22ba3ef51826006868154811061127057fe5b6000918252602090912001546001600160a01b031691906113f7565b6112d4565b6112a58261129f8684611900565b90611959565b90506112cd73b5abdabe50b5193d4db92a16011792b22ba3ef51826006868154811061127057fe5b50506112de565b5050600101611171565b505050565b6001600160a01b0380841660008181526004602090815260408083209487168352938152838220546001549383526003909152928120549092916113389183916113329161129f908890611900565b906118a3565b91508161138c576040805162461bcd60e51b815260206004820152601b60248201527f70617965652d69732d6e6f742d6475652d666f722d746f6b656e730000000000604482015290519081900360640190fd5b611396818361104e565b6001600160a01b03808716600090815260046020908152604080832093891683529281528282209390935560029092529020546113d3908361104e565b6001600160a01b039094166000908152600260205260409020939093559392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526112de9084906119c0565b8047101561149e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146114e9576040519150601f19603f3d011682016040523d82523d6000602084013e6114ee565b606091505b50509050806112de5760405162461bcd60e51b815260040180806020018281038252603a815260200180611c91603a913960400191505060405180910390fd5b600080611683846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156d57600080fd5b505afa158015611581573d6000803e3d6000fd5b505050506040513d602081101561159757600080fd5b5051604080516370a0823160e01b81526001600160a01b038781166004830152915161129f928916916370a08231916024808301926020929190829003018186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d602081101561160f57600080fd5b5051604080516306a61f7560e51b815290516001600160a01b038a169163d4c3eea0916004808301926020929190829003018186803b15801561165157600080fd5b505afa158015611665573d6000803e3d6000fd5b505050506040513d602081101561167b57600080fd5b505190611900565b9050801561189c5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316846001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e257600080fd5b505afa1580156116f6573d6000803e3d6000fd5b505050506040513d602081101561170c57600080fd5b50516001600160a01b031614156117255780915061189c565b6001600160a01b0380851660009081526008602090815260408083205481516350d25bcd60e01b81529151939416926350d25bcd92600480840193919291829003018186803b15801561177757600080fd5b505afa15801561178b573d6000803e3d6000fd5b505050506040513d60208110156117a157600080fd5b505160408051637e062a3560e11b815290519192506000916001600160a01b0388169163fc0c546a916004808301926020929190829003018186803b1580156117e957600080fd5b505afa1580156117fd573d6000803e3d6000fd5b505050506040513d602081101561181357600080fd5b50516040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561185757600080fd5b505afa15801561186b573d6000803e3d6000fd5b505050506040513d602081101561188157600080fd5b50519050611897600a82900a61129f8486611900565b935050505b5092915050565b6000828211156118fa576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261190f575060006110ab565b8282028284828161191c57fe5b04146110a85760405162461bcd60e51b8152600401808060200182810382526021815260200180611cf16021913960400191505060405180910390fd5b60008082116119af576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816119b857fe5b049392505050565b6060611a15826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a719092919063ffffffff16565b8051909150156112de57808060200190516020811015611a3457600080fd5b50516112de5760405162461bcd60e51b815260040180806020018281038252602a815260200180611d32602a913960400191505060405180910390fd5b6060611a808484600085611a8a565b90505b9392505050565b606082471015611acb5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ccb6026913960400191505060405180910390fd5b611ad485611be6565b611b25576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611b645780518252601f199092019160209182019101611b45565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611bc6576040519150601f19603f3d011682016040523d82523d6000602084013e611bcb565b606091505b5091509150611bdb828286611bec565b979650505050505050565b3b151590565b60608315611bfb575081611a83565b825115611c0b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c55578181015183820152602001611c3d565b50505050905090810190601f168015611c825780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212205ff8c953b494c0ad44fc28912c6425ea636708b65f1c8f8e1618eca6423c050564736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c8063715018a6116100ab578063b73974a11161006f578063b73974a1146103af578063c2001148146103c4578063d79779b2146103f7578063dc29f1de1461042a578063f2fde38b1461043f578063f3c92e8a1461047257610135565b8063715018a6146103135780638da5cb5b1461032857806393cb090e1461033d5780639f17b0f914610367578063addd50991461037c57610135565b8063406072a9116100f2578063406072a91461022d57806348b75044146102685780634d4cadd3146102a35780634d75190a146102b857806363037b0c146102cd57610135565b8063026c42071461013a5780631877bb5c146101615780632ad391ec1461019457806339414afd146101c95780633fc0b8a7146101f257610135565b3661013557005b600080fd5b34801561014657600080fd5b5061014f610487565b60408051918252519081900360200190f35b34801561016d57600080fd5b5061014f6004803603602081101561018457600080fd5b50356001600160a01b031661048d565b3480156101a057600080fd5b506101c7600480360360208110156101b757600080fd5b50356001600160a01b031661049f565b005b3480156101d557600080fd5b506101de61070d565b604080519115158252519081900360200190f35b3480156101fe57600080fd5b506101c76004803603604081101561021557600080fd5b506001600160a01b038135811691602001351661071b565b34801561023957600080fd5b5061014f6004803603604081101561025057600080fd5b506001600160a01b03813581169160200135166109d2565b34801561027457600080fd5b506101c76004803603604081101561028b57600080fd5b506001600160a01b03813581169160200135166109ef565b3480156102af57600080fd5b506101de610b6b565b3480156102c457600080fd5b506101c7610b74565b3480156102d957600080fd5b506102f7600480360360208110156102f057600080fd5b5035610bfe565b604080516001600160a01b039092168252519081900360200190f35b34801561031f57600080fd5b506101c7610c25565b34801561033457600080fd5b506102f7610cc7565b34801561034957600080fd5b506102f76004803603602081101561036057600080fd5b5035610cd6565b34801561037357600080fd5b5061014f610ce3565b34801561038857600080fd5b506102f76004803603602081101561039f57600080fd5b50356001600160a01b0316610cef565b3480156103bb57600080fd5b5061014f610d0a565b3480156103d057600080fd5b506101c7600480360360208110156103e757600080fd5b50356001600160a01b0316610d17565b34801561040357600080fd5b5061014f6004803603602081101561041a57600080fd5b50356001600160a01b0316610e51565b34801561043657600080fd5b506101c7610e63565b34801561044b57600080fd5b506101c76004803603602081101561046257600080fd5b50356001600160a01b0316610ebc565b34801561047e57600080fd5b506101c7610fc2565b60015481565b60036020526000908152604090205481565b6104a76110b1565b6000546001600160a01b039081169116146104f7576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b6001600160a01b03811661054b576040805162461bcd60e51b815260206004820152601660248201527576546f6b656e2d69732d7a65726f2d6164647265737360501b604482015290519081900360640190fd5b6001600160a01b03811660009081526007602052604090205460ff166105ab576040805162461bcd60e51b815260206004820152601060248201526f1d951bdad95b8b5b9bdd0b599bdd5b9960821b604482015290519081900360640190fd5b60005b60065481101561070957816001600160a01b0316600682815481106105cf57fe5b6000918252602090912001546001600160a01b03161415610701576006805460001981019081106105fc57fe5b600091825260209091200154600680546001600160a01b03909216918390811061062257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600680548061065b57fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03848116808452600783526040808520805460ff191690556008909352828420549251929091169290917ffe48082efa5ff0caecfc8a7dfbc427a9910386eb5ecd0ce47e0b5cb549c3459b9190a36001600160a01b038216600090815260086020526040902080546001600160a01b0319169055610709565b6001016105ae565b5050565b600954610100900460ff1681565b6107236110b1565b6000546001600160a01b03908116911614610773576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b6001600160a01b0382166107c7576040805162461bcd60e51b815260206004820152601660248201527576546f6b656e2d69732d7a65726f2d6164647265737360501b604482015290519081900360640190fd5b6001600160a01b03821660009081526007602052604090205460ff1615610828576040805162461bcd60e51b815260206004820152601060248201526f323ab83634b1b0ba3296bb2a37b5b2b760811b604482015290519081900360640190fd5b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087f57600080fd5b505afa158015610893573d6000803e3d6000fd5b505050506040513d60208110156108a957600080fd5b50516001600160a01b03161461093c576001600160a01b03811661090d576040805162461bcd60e51b81526020600482015260166024820152756f7261636c652d69732d7a65726f2d6164647265737360501b604482015290519081900360640190fd5b6001600160a01b03828116600090815260086020526040902080546001600160a01b0319169183169190911790555b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b03858116918217909255600081815260076020526040808220805460ff191690951790945592519184169290917fe3136fbc6700e6caa4fd499370c57e07bd40a24347bf7e04be3950663febe57c9190a35050565b600460209081526000928352604080842090915290825290205481565b6001600160a01b038216600090815260036020526040902054610a55576040805162461bcd60e51b815260206004820152601960248201527870617965652d646f65732d6e6f742d686176652d736861726560381b604482015290519081900360640190fd5b60095460ff1615610a6857610a686110b5565b6001600160a01b03811660008181526002602090815260408083205481516370a0823160e01b815230600482015291519394610af594919390926370a082319260248083019392829003018186803b158015610ac357600080fd5b505afa158015610ad7573d6000803e3d6000fd5b505050506040513d6020811015610aed57600080fd5b50519061104e565b90506000610b048484846112e3565b9050610b1a6001600160a01b03841685836113f7565b826001600160a01b0316846001600160a01b03167f8ac5b3c2902b21b6bbb4d99ec195e28a242cb6a1777804db10b84d91e2006429836040518082815260200191505060405180910390a350505050565b60095460ff1681565b610b7c6110b1565b6000546001600160a01b03908116911614610bcc576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b600954610100900460ff1615610bec576009805461ffff19169055610bfc565b6009805461ff0019166101001790555b565b60058181548110610c0b57fe5b6000918252602090912001546001600160a01b0316905081565b610c2d6110b1565b6000546001600160a01b03908116911614610c7d576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b60068181548110610c0b57fe5b678ac7230489e8000081565b6008602052600090815260409020546001600160a01b031681565b6801158e460913d0000081565b6001600160a01b038116600090815260036020526040902054610d7d576040805162461bcd60e51b815260206004820152601960248201527870617965652d646f65732d6e6f742d686176652d736861726560381b604482015290519081900360640190fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee600090815260026020527f6a26712a1b2f732f4c1fd85f9d6ed8235573aaa2a79aa2bab72c2423a73a9faf54610dc990479061104e565b90506000610dec8373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee846112e3565b9050610df88382611449565b60408051828152905173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee916001600160a01b038616917f8ac5b3c2902b21b6bbb4d99ec195e28a242cb6a1777804db10b84d91e20064299181900360200190a3505050565b60026020526000908152604090205481565b600954610100900460ff16610eb4576040805162461bcd60e51b81526020600482015260126024820152711d1bdc0b5d5c0b5a5ccb591a5cd8589b195960721b604482015290519081900360640190fd5b610bfc6110b5565b610ec46110b1565b6000546001600160a01b03908116911614610f14576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b6001600160a01b038116610f67576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610fca6110b1565b6000546001600160a01b0390811691161461101a576040805162461bcd60e51b81526020600482018190526024820152600080516020611d12833981519152604482015290519081900360640190fd5b60095460ff1615611034576009805460ff19169055610bfc565b6009805461ff001960ff1990911660011716610100179055565b6000828201838110156110a8576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b3390565b73b5abdabe50b5193d4db92a16011792b22ba3ef5131678ac7230489e8000081106110e05750610bfc565b60005b6006548110156111565761113661112f6006838154811061110057fe5b6000918252602090912001546001600160a01b031673b5abdabe50b5193d4db92a16011792b22ba3ef5161152e565b839061104e565b9150678ac7230489e80000821061114e575050610bfc565b6001016110e3565b50600061116c6801158e460913d00000836118a3565b905060005b6006548110156112de5760006111a86006838154811061118d57fe5b6000918252602090912001546001600160a01b03163061152e565b90506000600683815481106111b957fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561120857600080fd5b505afa15801561121c573d6000803e3d6000fd5b505050506040513d602081101561123257600080fd5b50519050818411156112915761124884836118a3565b935061128c73b5abdabe50b5193d4db92a16011792b22ba3ef51826006868154811061127057fe5b6000918252602090912001546001600160a01b031691906113f7565b6112d4565b6112a58261129f8684611900565b90611959565b90506112cd73b5abdabe50b5193d4db92a16011792b22ba3ef51826006868154811061127057fe5b50506112de565b5050600101611171565b505050565b6001600160a01b0380841660008181526004602090815260408083209487168352938152838220546001549383526003909152928120549092916113389183916113329161129f908890611900565b906118a3565b91508161138c576040805162461bcd60e51b815260206004820152601b60248201527f70617965652d69732d6e6f742d6475652d666f722d746f6b656e730000000000604482015290519081900360640190fd5b611396818361104e565b6001600160a01b03808716600090815260046020908152604080832093891683529281528282209390935560029092529020546113d3908361104e565b6001600160a01b039094166000908152600260205260409020939093559392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526112de9084906119c0565b8047101561149e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146114e9576040519150601f19603f3d011682016040523d82523d6000602084013e6114ee565b606091505b50509050806112de5760405162461bcd60e51b815260040180806020018281038252603a815260200180611c91603a913960400191505060405180910390fd5b600080611683846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156d57600080fd5b505afa158015611581573d6000803e3d6000fd5b505050506040513d602081101561159757600080fd5b5051604080516370a0823160e01b81526001600160a01b038781166004830152915161129f928916916370a08231916024808301926020929190829003018186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d602081101561160f57600080fd5b5051604080516306a61f7560e51b815290516001600160a01b038a169163d4c3eea0916004808301926020929190829003018186803b15801561165157600080fd5b505afa158015611665573d6000803e3d6000fd5b505050506040513d602081101561167b57600080fd5b505190611900565b9050801561189c5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316846001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e257600080fd5b505afa1580156116f6573d6000803e3d6000fd5b505050506040513d602081101561170c57600080fd5b50516001600160a01b031614156117255780915061189c565b6001600160a01b0380851660009081526008602090815260408083205481516350d25bcd60e01b81529151939416926350d25bcd92600480840193919291829003018186803b15801561177757600080fd5b505afa15801561178b573d6000803e3d6000fd5b505050506040513d60208110156117a157600080fd5b505160408051637e062a3560e11b815290519192506000916001600160a01b0388169163fc0c546a916004808301926020929190829003018186803b1580156117e957600080fd5b505afa1580156117fd573d6000803e3d6000fd5b505050506040513d602081101561181357600080fd5b50516040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561185757600080fd5b505afa15801561186b573d6000803e3d6000fd5b505050506040513d602081101561188157600080fd5b50519050611897600a82900a61129f8486611900565b935050505b5092915050565b6000828211156118fa576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261190f575060006110ab565b8282028284828161191c57fe5b04146110a85760405162461bcd60e51b8152600401808060200182810382526021815260200180611cf16021913960400191505060405180910390fd5b60008082116119af576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816119b857fe5b049392505050565b6060611a15826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a719092919063ffffffff16565b8051909150156112de57808060200190516020811015611a3457600080fd5b50516112de5760405162461bcd60e51b815260040180806020018281038252602a815260200180611d32602a913960400191505060405180910390fd5b6060611a808484600085611a8a565b90505b9392505050565b606082471015611acb5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ccb6026913960400191505060405180910390fd5b611ad485611be6565b611b25576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611b645780518252601f199092019160209182019101611b45565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611bc6576040519150601f19603f3d011682016040523d82523d6000602084013e611bcb565b606091505b5091509150611bdb828286611bec565b979650505050505050565b3b151590565b60608315611bfb575081611a83565b825115611c0b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c55578181015183820152602001611c3d565b50505050905090810190601f168015611c825780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212205ff8c953b494c0ad44fc28912c6425ea636708b65f1c8f8e1618eca6423c050564736f6c634300060c0033",
  "devdoc": {
    "details": "This contract allows to split ERC20 and Ether tokens among a group of accounts. The sender does not need to be aware that the token(s) (revenue) will be split in this way, since it is handled transparently by the contract. The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each account to a number of shares. Of all the fund this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. `RevenueSplitter` follows a pull revenue model. This means that revenue is not automatically forwarded to the accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} or {releaseEther} function.",
    "kind": "dev",
    "methods": {
      "addVToken(address,address)": {
        "details": "Add vToken for vesper deployer top-up",
        "params": {
          "_oracle": "- Chainlink oracle address used for collateral token to ETH estimation Find chainlink oracle details here https://docs.chain.link/docs/ethereum-addresses/ For pool with WETH as collateral token, we do not need _oracle and _oracle can have ZERO address.",
          "_vToken": "- Vesper token"
        }
      },
      "constructor": {
        "details": "Creates an instance of `RevenueSplitter` where each account in `_payees` is assigned token(s) at the matching position in the `_share` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`.",
        "params": {
          "_payees": "-  address(es) of payees eligible to receive token(s)",
          "_share": "- list of shares, transferred to payee in provided ratio."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "release(address,address)": {
        "details": "Transfer of ERC20 token(s) to `payee` based on share and their previous withdrawals.",
        "params": {
          "_asset": "- ERC20 token's address",
          "_payee": "- payee's address to receive token(s)"
        }
      },
      "releaseEther(address)": {
        "details": "Transfer of ether to `payee` based on share and their previous withdrawals.",
        "params": {
          "_payee": "- payee's address to receive ether"
        }
      },
      "removeVToken(address)": {
        "details": "Remove vToken for vesper deployer top-up",
        "params": {
          "_vToken": "- Vesper token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "toggleAutoTopUp()": {
        "details": "Toggle auto top-up to true will enable top-up too."
      },
      "toggleTopUpStatus()": {
        "details": "Toggle top-up status to false will disable auto top-up too."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "RevenueSplitter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "toggleAutoTopUp()": {
        "notice": "Toggle auto top-up"
      },
      "toggleTopUpStatus()": {
        "notice": "Toggle top-up status"
      },
      "topUp()": {
        "notice": "top-up Vesper deployer address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3302,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17905,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "totalShare",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17909,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "totalReleased",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17913,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "share",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17919,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "released",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 17922,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "payees",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17925,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "vTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17929,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "isVToken",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17933,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "oracles",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 17950,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "isAutoTopUpEnabled",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 17952,
        "contract": "contracts/strategies/RevenueSplitter.sol:RevenueSplitter",
        "label": "isTopUpEnabled",
        "offset": 1,
        "slot": "9",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}